package com.ausgetrunken.ui.base

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Error
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.NetworkCheck
import androidx.compose.material.icons.filled.Security
import androidx.compose.material.icons.filled.Warning
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Snackbar
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.delay

/**
 * Comprehensive error handling wrapper for all screens.
 * 
 * Features:
 * - Automatic error type detection and appropriate UI response
 * - Smart retry mechanisms with delays
 * - Authentication error navigation
 * - Contextual error messages and icons
 * - Accessibility support
 * - Animation for better UX
 */
@Composable
fun ErrorHandlingWrapper(
    viewModel: BaseViewModel,
    onNavigateToLogin: () -> Unit = {},
    onRetry: (() -> Unit)? = null,
    content: @Composable () -> Unit
) {
    val errorState by viewModel.errorState.collectAsState()
    val snackbarHostState = remember { SnackbarHostState() }
    
    Box {
        content()
        
        // Handle different error types with smart behavior
        errorState?.let { error ->
            when {
                // Authentication errors require navigation to login
                error.requiresNavigation -> {
                    LaunchedEffect(error) {
                        onNavigateToLogin()
                        viewModel.clearError()
                    }
                }
                
                // Validation errors show as persistent card
                error is UiErrorState.Validation -> {
                    AnimatedVisibility(
                        visible = true,
                        enter = slideInVertically() + fadeIn(),
                        exit = slideOutVertically() + fadeOut()
                    ) {
                        ValidationErrorCard(
                            error = error,
                            onDismiss = { viewModel.clearError() }
                        )
                    }
                }
                
                // Network errors with smart retry
                error is UiErrorState.Network && error.canRetry -> {
                    LaunchedEffect(error) {
                        val actionLabel = if (error.retryDelayMs > 0) {
                            "Retry in ${error.retryDelayMs / 1000}s"
                        } else {
                            "Retry"
                        }
                        
                        val result = snackbarHostState.showSnackbar(
                            message = error.message,
                            actionLabel = actionLabel,
                            withDismissAction = true
                        )
                        
                        // Handle retry with delay
                        if (result == androidx.compose.material3.SnackbarResult.ActionPerformed) {
                            if (error.retryDelayMs > 0) {
                                delay(error.retryDelayMs)
                            }
                            onRetry?.invoke() ?: viewModel.retryLastOperation()
                        }
                    }
                }
                
                // Other errors show as snackbar
                else -> {
                    LaunchedEffect(error) {
                        snackbarHostState.showSnackbar(
                            message = error.message,
                            actionLabel = if (error.canRetry) "Retry" else null,
                            withDismissAction = true
                        )
                    }
                }
            }
        }
        
        SnackbarHost(
            hostState = snackbarHostState,
            snackbar = { snackbarData ->
                EnhancedSnackbar(
                    snackbarData = snackbarData,
                    errorType = errorState?.type,
                    onRetry = {
                        snackbarData.dismiss()
                        onRetry?.invoke() ?: viewModel.retryLastOperation()
                    }
                )
            }
        )
    }
}

/**
 * Enhanced snackbar with error type styling and icons
 */
@Composable
private fun EnhancedSnackbar(
    snackbarData: androidx.compose.material3.SnackbarData,
    errorType: String?,
    onRetry: () -> Unit = {}
) {
    val (icon, containerColor) = when (errorType) {
        "Network" -> Icons.Default.NetworkCheck to MaterialTheme.colorScheme.primary
        "Authentication" -> Icons.Default.Security to MaterialTheme.colorScheme.error
        "Permission" -> Icons.Default.Security to MaterialTheme.colorScheme.tertiary
        "Validation" -> Icons.Default.Warning to MaterialTheme.colorScheme.secondary
        "System" -> Icons.Default.Error to MaterialTheme.colorScheme.error
        else -> Icons.Default.Info to MaterialTheme.colorScheme.surfaceVariant
    }
    
    Snackbar(
        snackbarData = snackbarData,
        containerColor = containerColor,
        action = {
            snackbarData.visuals.actionLabel?.let { label ->
                Button(
                    onClick = onRetry,
                    colors = androidx.compose.material3.ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.surface
                    )
                ) {
                    Text(label)
                }
            }
        },
        content = {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    imageVector = icon,
                    contentDescription = null,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(snackbarData.visuals.message)
            }
        }
    )
}

/**
 * Specialized validation error card
 */
@Composable
private fun ValidationErrorCard(
    error: UiErrorState.Validation,
    onDismiss: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.errorContainer
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    imageVector = Icons.Default.Warning,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.error
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = "Validation Error",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onErrorContainer
                )
            }
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = error.message,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onErrorContainer
            )
            
            error.field?.let { field ->
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "Field: $field",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onErrorContainer.copy(alpha = 0.7f)
                )
            }
            
            Spacer(modifier = Modifier.height(12.dp))
            
            Row(
                horizontalArrangement = Arrangement.End,
                modifier = Modifier.fillMaxWidth()
            ) {
                OutlinedButton(onClick = onDismiss) {
                    Text("Dismiss")
                }
            }
        }
    }
}

/**
 * Comprehensive error card for critical errors
 */
@Composable
fun ErrorCard(
    errorState: UiErrorState,
    onRetry: () -> Unit = {},
    onDismiss: () -> Unit = {},
    modifier: Modifier = Modifier
) {
    val (icon, title, containerColor) = when (errorState) {
        is UiErrorState.Authentication -> Triple(
            Icons.Default.Security,
            "Authentication Required",
            MaterialTheme.colorScheme.errorContainer
        )
        is UiErrorState.Network -> Triple(
            Icons.Default.NetworkCheck,
            "Connection Problem",
            MaterialTheme.colorScheme.primaryContainer
        )
        is UiErrorState.Data -> Triple(
            Icons.Default.Info,
            "Data Error",
            MaterialTheme.colorScheme.secondaryContainer
        )
        is UiErrorState.Permission -> Triple(
            Icons.Default.Security,
            "Permission Denied",
            MaterialTheme.colorScheme.tertiaryContainer
        )
        is UiErrorState.Validation -> Triple(
            Icons.Default.Warning,
            "Validation Error",
            MaterialTheme.colorScheme.errorContainer
        )
        is UiErrorState.System -> Triple(
            Icons.Default.Error,
            "System Error",
            MaterialTheme.colorScheme.errorContainer
        )
        is UiErrorState.Unknown -> Triple(
            Icons.Default.Error,
            "Something Went Wrong",
            MaterialTheme.colorScheme.surfaceVariant
        )
    }
    
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = containerColor)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Icon(
                imageVector = icon,
                contentDescription = null,
                modifier = Modifier.size(48.dp),
                tint = MaterialTheme.colorScheme.onSurface
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Text(
                text = title,
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = errorState.message,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Row(
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                if (errorState.canRetry) {
                    Button(onClick = onRetry) {
                        Text("Try Again")
                    }
                }
                
                OutlinedButton(onClick = onDismiss) {
                    Text("Dismiss")
                }
            }
        }
    }
}

/**
 * Example usage in a screen - ultra simple!
 */
@Composable
fun ExampleCleanScreen(
    viewModel: BaseViewModel,
    onNavigateToLogin: () -> Unit
) {
    // This is ALL you need for comprehensive error handling!
    ErrorHandlingWrapper(
        viewModel = viewModel,
        onNavigateToLogin = onNavigateToLogin
    ) {
        // Your screen content here
        // All error handling is automatic!
        Text("Your app content")
    }
}